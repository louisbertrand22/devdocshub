name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  PNPM_VERSION: '9.0.0'

jobs:
  # Frontend Tests & Build
  frontend-ci:
    name: Frontend CI (Next.js)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm --filter web exec tsc --noEmit

      - name: Build Next.js app
        run: pnpm build
        env:
          NEXT_PUBLIC_API_BASE: http://localhost:8000

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: apps/web/.next
          retention-days: 7

  # Backend Tests & Lint
  backend-ci:
    name: Backend CI (FastAPI)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: devdoc
          POSTGRES_PASSWORD: devdoc
          POSTGRES_DB: devdocs
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd services/api
          pip install -r requirements.txt
          pip install pytest pytest-cov httpx

      - name: Run tests
        run: |
          cd services/api
          python -m pytest --cov=app --cov-report=xml --cov-report=term
        env:
          PYTHONPATH: .
          DATABASE_URL: postgresql://devdoc:devdoc@localhost:5432/devdocs
          JWT_SECRET: test-secret-key
          JWT_EXPIRE_MINUTES: 60

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./services/api/coverage.xml
          flags: backend
          name: backend-coverage
        continue-on-error: true

  # Docker Build Tests
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [frontend-ci, backend-ci]

    strategy:
      matrix:
        service: [web, api]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image - ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service == 'web' && '.' || './services/api' }}
          file: ${{ matrix.service == 'web' && './apps/web/Dockerfile' || './services/api/Dockerfile' }}
          push: false
          tags: devdocshub-${{ matrix.service }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_API_BASE=http://localhost:8000

  # Docker Compose Integration Test
  docker-compose-test:
    name: Docker Compose Integration Test
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file for API
        run: |
          cat > services/api/.env << EOF
          DATABASE_URL=postgresql://devdoc:devdoc@db:5432/devdocs
          JWT_SECRET=test-secret-key
          JWT_EXPIRE_MINUTES=60
          JWT_REFRESH_EXPIRE_DAYS=30
          EOF

      - name: Start services with Docker Compose
        run: |
          docker compose up -d --build
          sleep 30

      - name: Check services health
        run: |
          echo "Checking API health..."
          curl -f http://localhost:8000/ || exit 1
          echo "API is healthy!"

          echo "Checking Web health..."
          curl -f http://localhost:3000/ || exit 1
          echo "Web is healthy!"

      - name: View logs on failure
        if: failure()
        run: |
          docker compose logs api
          docker compose logs web

      - name: Cleanup
        if: always()
        run: docker compose down -v

  # All checks passed
  all-checks:
    name: All CI Checks Passed
    runs-on: ubuntu-latest
    needs: [frontend-ci, backend-ci, docker-build, docker-compose-test]

    steps:
      - name: Success
        run: echo "All CI checks passed successfully!"

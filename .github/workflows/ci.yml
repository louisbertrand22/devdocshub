name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  frontend-build:
    name: Frontend Build & Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.0.0
      
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build frontend
        run: pnpm build
        env:
          NEXT_PUBLIC_API_BASE: http://localhost:8000
      
      - name: Check for lint script
        id: check-lint
        run: |
          if pnpm --filter web run lint --help &> /dev/null; then
            echo "has_lint=true" >> $GITHUB_OUTPUT
          else
            echo "has_lint=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true
      
      - name: Lint frontend
        if: steps.check-lint.outputs.has_lint == 'true'
        run: pnpm --filter web run lint
        continue-on-error: true

  backend-build:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('services/api/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        working-directory: services/api
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Check Python syntax
        working-directory: services/api
        run: python -m py_compile app/main.py
      
      - name: Check for tests
        id: check-tests
        working-directory: services/api
        run: |
          if [ -d "tests" ] && pip show pytest &> /dev/null; then
            echo "has_tests=true" >> $GITHUB_OUTPUT
          else
            echo "has_tests=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true
      
      - name: Run tests
        if: steps.check-tests.outputs.has_tests == 'true'
        working-directory: services/api
        run: pytest
        continue-on-error: true

  docker-build:
    name: Docker Images Build
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/web/Dockerfile
          push: false
          tags: devdocshub-web:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/api
          file: ./services/api/Dockerfile
          push: false
          tags: devdocshub-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
